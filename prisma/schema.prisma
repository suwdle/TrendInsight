// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  interests     Interest[]
  bookmarks     Bookmark[]
  readArticles  ReadArticle[]
  preferences   UserPreference?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String
  summary     String?
  imageUrl    String?
  sourceUrl   String
  sourceName  String
  publishedAt DateTime
  category    String
  createdAt   DateTime @default(now())
  
  interests   Interest[]
  bookmarks   Bookmark[]
  readArticles ReadArticle[]
}

model Interest {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  
  users     User[]
  articles  Article[]
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, articleId])
}

model ReadArticle {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  readAt    DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, articleId])
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  darkMode      Boolean  @default(false)
  emailNotifications Boolean @default(true)
  articleCount  Int      @default(10)
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
